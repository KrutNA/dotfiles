#+author: Krutko Nikita / KrutNA

~init.el~ is being generated base on this (~readme.org~) file, so you have to edit this instead of ~init.el~.

* COMMENT time
#+begin_src emacs-lisp
  (message "[INIT] %f" (float-time))
#+end_src


* Init

** Package

Adding [[https://melpa.org/][MELPA]] archive for most packages.

#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

#+end_src

** use-package

Install ~use-package~ if not installed.

~use-package~ provides decent customization and lazy packages loading.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

** setq

*** XDG Base Directory paths

XDG Base Directory specification variables setup.

#+begin_src emacs-lisp
  (setq xdg-data-home                     "~/.local/share"
        xdg-config-home                   "~/.config"
        xdg-cache-home                    "~/.cache"
        xdg-download-dir                  "~/downloads")
#+end_src

*** Files

Setting up paths for this and custom file (latter may be unused but still has to be, can be changed to /dev/null tho).

#+begin_src emacs-lisp
  (setq custom-file                       (concat user-emacs-directory "custom.el")
        config-org-file                   (concat user-emacs-directory "readme.org")
        backup-directory-alist            `(("." . ,(concat user-emacs-directory "backups"))))
#+end_src

*** Variables

#+begin_src emacs-lisp
  (setq local/font-height                 105             ; 10 = 1pt
	local/tool-bar                    -1              ; -1 for desabling
	local/column-num                  t               ; number of current column
	local/line-num                    t               ; number of current line

	;; LaTeX
	local/latex-compiler              "xelatex"       ; default latex compiller

	;; programming
	local/electric-pair-mode          t               ; double parenthesis
	local/paren-mode                  t               ; show matching pars

	;; which-key
	;; Zero value of delay may cause issues
	local/wk-delay                    0.01            ; delay to which-key after keypress
	local/wk-s-delay                  0.05            ; delay to rerender

	;; path to `tree-sitter` binaries
	local/tree-sitter-bins            (concat xdg-data-home "/tree-sitter/bin")
	)
#+end_src

*** PATH

Update PATH envinronment variable.

#+begin_src emacs-lisp
  (setenv "PATH"
          (concat xdg-data-home   "/cargo/bin"    ":"
                  xdg-data-home   "/bin"          ":"
                  (getenv "PATH")))

#+end_src

** Keybinds

Main keybinds are not related to packages nor custom functions.


*** reverse-im

Allows using non-english layout for shortcuts.

Translates something like ~M-—á~ to ~M-x~, quite handy.

Is not universal, i.e. doesn't work with ~mu4e~.

#+begin_src emacs-lisp
  (use-package reverse-im
    :ensure t
    :custom
    (reverse-im-input-methods '("russian-computer"))
    :config
    (reverse-im-mode t))
#+end_src


* View / UI

** Theme

Select and autoload theme on initialization frame due to ~emacsclient~ bug that is breaking themes.

#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :ensure t :defer t
    :hook (after-init . load-spacemacs-theme)
    :init
    (defun load-spacemacs-theme ()
      "Load spacemacs dark theme"
      (load-theme 'spacemacs-dark t)))
#+end_src

** Startup

~emacs~/~emacsclient~ startup configuration.

#+begin_src emacs-lisp
  (tool-bar-mode                          local/tool-bar)
  (column-number-mode                     local/column-num)
  (line-number-mode                       local/line-num)

  (set-face-attribute 'default nil :height local/font-height)
#+end_src

** delight

~delight~'s modeline names configurations, i.e. ~python-mode~ -> üêç

#+begin_src emacs-lisp
  (use-package delight
    :ensure t
    :init
    (delight '((java-mode   "‚Ñë")
	       (c-mode      "c")
	       (c++-mode    "cxx")
	       (python-mode "üêç")
	       (lisp-interaction-mode "LispI")
	       (emacs-lisp-mode "EL")
	       (eldoc-mode nil eldoc)
	       (abbrev-mode nil abbrev))))
#+end_src

** COMMENT after-init
#+begin_src emacs-lisp
  (defun configure-emacsclient-buffer-on-load ()
    ""
    ())

  (add-hook 'after-init-hook 'configure-emacsclient-buffer-on-load)
#+end_src

** helm

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :bind (:map helm-command-map ("C-c h" . helm-execute-persistent-action)))
#+end_src

** which-key

Shows available keys after delay.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :delight
    :hook (after-init . which-key-mode)
    :custom
    (which-key-idle-delay local/wk-delay)
    (which-key-idle-secondary-delay local/wk-s-delay))
#+end_src

** COMMENT screenshot
#+begin_src emacs-lisp
  (add-to-list 'load-path user-emacs-directory)
  (use-package screenshot
    :config
    (setq screenshot-schemes              ; Edit as you like
          '(
            ;; To local image directory
            ("local"
             :dir "~/images/")            ; Image repository directory
            ;; To current directory
            ("current-directory"          ; No need to modify
             :dir default-directory)
            ;; To remote ssh host
            ("remote-ssh"
             :dir "/tmp/"                 ; Temporary saved directory
             :ssh-dir "www.example.org:public_html/archive/" ; SSH path
             :url "http://www.example.org/archive/")  ; Host URL prefix
            ;; To EmacsWiki (need yaoddmuse.el)
            ("EmacsWiki"                 ; Oddmuse wiki which many emacs users are familiar with
             :dir "~/.yaoddmuse/EmacsWiki/"  ; Same as yaoddmuse-directory
             :yaoddmuse "EmacsWiki")         ; You can specify another Oddmuse Wiki
            ;; To local web server
            ("local-server"
             :dir "~/public_html/"           ; Local server directory
             :url "http://127.0.0.1/")))     ; Local server URL prefix
    (setq screenshot-default-scheme "local")); Default scheme is "local"
#+end_src

** emojify

*Emojis!*

#+begin_src emacs-lisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode))
#+end_src

** COMMENT unicode

#+begin_src emacs-lisp
  (use-package unicode-fonts
    :ensure t)
#+end_src

** y-or-n

Press ~y~/~n~ insted of typing ~yes<RET>~/~no<RET>~!

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src


* org-mode

#+begin_src emacs-lisp
  (use-package auctex
    :ensure t :defer t)

  (use-package org
    :after ox-latex :defer t
    ;; :hook (org-mode . turn-on-org-cdlatex)
    :custom
    (org-src-fontify-natively t)
    (org-confirm-babel-evaluate nil)
    (org-latex-compiler local/latex-compiler)
    (org-babel-inline-result-wrap "%s")
    (org-babel-load-languages '((emacs-lisp      . t)
                                (shell           . t)
                                (awk             . t)
                                ;; (rust            . t)
                                (C               . t)
                                ;; (cpp             . t)
                                (python          . t)))
    (org-latex-packages-alist `((,(concat "a4paper,left=3cm,top=2cm,right=1.5cm,bottom=2cm,"
                                          "marginparsep=7pt,marginparwidth=.6in") "geometry" t)
                                ;; ("" "cmap" t)
                                ("" "xcolor" t)
                                ;; ("" "listings" t)
                                ("AUTO" "polyglossia" t ("xelatex")))))
#+end_src


* Programming

** Configurations (from variables)
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (show-paren-mode local/paren-mode)
    (electric-pair-mode local/paren-mode))
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode org-mode) . rainbow-delimiters-mode))
#+end_src

** COMMENT flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t :defer t
    :init (global-flycheck-mode))
#+end_src

** tree-sitter

~tree-sitter~ is a neat incremental parser.

As per ~tree-sitter-load~ function description, it reads binaries named ~tree_sitter_$LANGNAME.so~ and ~tree-sitter-$LANGNAME.so~ (on linux).

#+begin_src emacs-lisp

  (use-package tree-sitter
    :ensure t
    :hook ((tree-sitter-after-on . tree-sitter-hl-mode))
    :custom
    (global-tree-sitter-mode t)
    :config
    (add-to-list 'tree-sitter-load-path local/tree-sitter-bins))


  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+end_src

** LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook (((sh-mode
	     c-mode c++-mode
	     ) . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
#+end_src

*** helm

#+begin_src emacs-lisp
  (use-package helm-lsp
    :ensure t
    :commands helm-lsp-workspace-symbol)
#+end_src

** Company

*** company

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :delight
    :hook (after-init . global-company-mode))
#+end_src

*** company box

~company~ backend with icons.

#+begin_src emacs-lisp
  (use-package company-box
    :ensure t
    :delight
    :hook (company-mode . company-box-mode))
#+end_src

** yasnippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :delight yas-minor-mode
    :hook ((prog-mode org-mode) . yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+end_src

** projectile

Project tree and many other features.

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :delight '(:eval (if (not (string= (projectile-project-name) "-"))
			 (concat " [" (projectile-project-name) "]")
		       ""))
    :hook (after-init . projectile-mode)
    :bind-keymap ("C-c p" . projectile-command-map))
#+end_src

** dap-mode debugging

#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t
    :after lsp
    :config
    (dap-mode t)
    (dap-ui-mode t)
    :init
    (dap-register-debug-template "Rust::GDB Run Configuration"
                                 (list :type "gdb"
                                       :request "launch"
                                       :name "GDB::Run"
                                       :gdbpath "rust-gdb"
                                       :target nil
                                       :cwd nil)))
  (use-package dap-java
    :after lsp-java)
#+end_src

** COMMENT treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay      0.5
	    treemacs-directory-name-transformer    #'identity
	    treemacs-display-in-side-window        t
	    treemacs-eldoc-display                 t
	    treemacs-file-event-delay              5000
	    treemacs-file-extension-regex          treemacs-last-period-regex-value
	    treemacs-file-follow-delay             0.2
	    treemacs-file-name-transformer         #'identity
	    treemacs-follow-after-init             t
	    treemacs-git-command-pipe              ""
	    treemacs-goto-tag-strategy             'refetch-index
	    treemacs-indentation                   2
	    treemacs-indentation-string            " "
	    treemacs-is-never-other-window         nil
	    treemacs-max-git-entries               5000
	    treemacs-missing-project-action        'ask
	    treemacs-move-forward-on-expand        nil
	    treemacs-no-png-images                 nil
	    treemacs-no-delete-other-windows       t
	    treemacs-project-follow-cleanup        nil
	    treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                      'left
	    treemacs-read-string-input             'from-child-frame
	    treemacs-recenter-distance             0.1
	    treemacs-recenter-after-file-follow    nil
	    treemacs-recenter-after-tag-follow     nil
	    treemacs-recenter-after-project-jump   'always
	    treemacs-recenter-after-project-expand 'on-distance
	    treemacs-show-cursor                   nil
	    treemacs-show-hidden-files             t
	    treemacs-silent-filewatch              nil
	    treemacs-silent-refresh                nil
	    treemacs-sorting                       'alphabetic-asc
	    treemacs-space-between-root-nodes      t
	    treemacs-tag-follow-cleanup            t
	    treemacs-tag-follow-delay              1.5
	    treemacs-user-mode-line-format         nil
	    treemacs-user-header-line-format       nil
	    treemacs-width                         35
	    treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))
#+end_src

** Languages

Language specific plugins' configurations.

*** Rust

Requires [[https://github.com/rust-analyzer/rust-analyzer][rust-analyzer]].

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t :defer t
    :hook (rust-mode . lsp)
    :delight "‚Ñù")
#+end_src

*** C/C++

LSP requires clangd.

**** C

#+begin_src emacs-lisp
#+end_src

**** –°++

#+begin_src emacs-lisp
#+end_src

*** Java

LSP automagically installs Eclipse JDT language server upon run.

#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t :defer t)
#+end_src

*** Kotlin

Requires [[https://github.com/fwcd/kotlin-language-server/blob/master/BUILDING.md][kotlin-language-server]].

#+begin_src emacs-lisp
  (use-package kotlin-mode
    :ensure t :defer t
    :delight "Kt"
    :hook (kotlin-mode . lsp))
#+end_src

*** Groovy

Requres [[https://github.com/prominic/groovy-language-server#build][groovy-language-server]].

#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t :defer t
    :hook (groovy-mode . lsp))
#+end_src

*** Python

#+begin_src emacs-lisp

#+end_src

*** C#

#+begin_src emacs-lisp
  (use-package csharp-mode
    :ensure t :defer t
    :delight "C#"
    :hook (csharp-mode . lsp)
    :config
    (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))
#+end_src

*** Web

**** Javscript

#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t :defer t
    :delight "JS"
    :hook (js2-mode . lsp))
#+end_src

**** Typescript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t :defer t
    :delight "TS"
    :mode ("\\.ts$" "\\.tsx$")
    :hook (typescript-mode . lsp))

  (use-package web-mode
    :ensure t :defer t
    :hook (typescript-mode . web-mode)
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-style-padding 2)
    (web-mode-script-padding 2))
#+end_src

**** React

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :ensure t :defer t
    :mode ("\\.jsx$" . rjsx-mode))
#+end_src

*** Json

#+begin_src emacs-lisp
  (use-package json-mode
    :defer t :defer t
    :delight "JSON"
    :hook (json-mode . lsp))
#+end_src

*** Yaml

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t :defer t)
#+end_src


* mu4e

Maildir config. Using ~isync~ ([[../mail/mbsyncrc][mbsyncrc]]) for fetching and syncing and ~sendmail~ ([[../mail/msmtprc/][msmtprc]]) for sending emails.

For configurations you could look at [[../mail/][my mail configurations]] and [[../mail/README.org][README]] in this folder.

Currently it only contains example for mail.ru inbox, but I may or may not add others.

#+begin_src emacs-lisp
  (use-package smtpmail
    :custom
    (message-send-mail-function         'smtpmail-send-it)
    (message-send-mail-function         'message-send-mail-with-sendmail)
    (sendmail-coding-system             'utf-8))

  (use-package mu4e
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :commands (mu4e)
    :after smtpmail
    :bind (("C-x m" . mu4e)
	   :map mu4e-headers-mode-map
	   ("v"     . mu4e-headers-view-message))
    :custom
    (mu4e-maildir-shortcuts              t)
    (mu4e-change-filenames-when-moving   t)
    (mu4e-view-prefer-html               t)
    (mu4e-show-images                    t)
    (mu4e-view-image-max-width         800)
    (mu4e-enable-async-operations        t)
    (message-kill-buffer-on-exit         t)
    (mu4e-enable-mode-line               t)
    (mu4e-index-cleanup                nil)
    (mu4e-index-lazy-check               t)
    (mu4e-use-fancy-chars              nil)
    (mu4e-enable-notifications           t)
    (mu4e-html2text-command              "/usr/local/bin/w3m -T text/html")
    (mu4e-get-mail-command               "mbsync -c ~/.config/mail/mbsyncrc mailru.main")
    :config
    (defun mu4e/check-msg-contact (msg)
      ""
      (when msg
	(mu4e-message-contact-field-matches msg :from-or-to user-mail-address)))
    (defun mu4e/switch-msg (name)
      "Message on switch"
      (mu4e-message "Switch to %s" name))
    (setq local/msmtp-config (concat xdg-config-home "/mail/msmtprc"))
    (setq mu4e-contexts
	  `( ,(make-mu4e-context
		 :name       "mailru.main"
		 :enter-func (lambda () (mu4e/switch-msg "MailRu Main"))
		 :match-func 'mu4e/check-msg-contact
		 :vars      '((user-mail-address             . "krutko_n_a@mail.ru")
			      (user-full-name                . "Krutko Nikita")
			      (mu4e-drafts-folder            . "/mailru.main/–ß–µ—Ä–Ω–æ–≤–∏–∫–∏")
			      (mu4e-trash-folder             . "/mailru.main/–ö–æ—Ä–∑–∏–Ω–∞")
			      (mu4e-sent-folder              . "/mailru.main/–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ")
			      (mu4e-refile-folder            . "/mailru.main/–ê—Ä—Ö–∏–≤")
			      (mu4e-compose-signature        . "\nBest regards,\nKrutko Nikita")
			      (smtpmail-smtp-server          . "smtp.mail.ru")
			      (smtpmail-smtp-service         . 465)
			      (starttls-use-gnutls           . t)
			      (smtpmail-starttls-credentials . '(("smtp.mail.ru" 465 nil nil)))
			      (smtpmail-auth-credentials     . '(("smtp.mail.ru" 465
								  "krutko_n_a@mail.ru" nil)))
			      (smtpmail-smtp-user            . "krutko_n_a@mail.ru"))))))
#+end_src


* Scripts

Some useful scripts for any situations.

** sudo-reopen

Reopens current file with ~sudo~ in a new buffer.

#+begin_src emacs-lisp
  (defun sudo-reopen ()
    "Open curent file with sudo"
    (interactive)
    (find-file (concat "/sudo::" buffer-file-name)))
#+end_src

** tangle readme

Function to tangle (convert to ~init.el~) this file on save.

#+begin_src emacs-lisp
  (defun tangle-file ()
    "Tangle file if name equals to `config-org-file`"
    (when (string= buffer-file-name
                   config-org-file)
      (org-babel-tangle-file buffer-file-name)))
  (add-hook 'after-save-hook 'tangle-file)
#+end_src



* COMMENT time
#+begin_src emacs-lisp
  (message "[INIT] %f" (float-time))
#+end_src


#+property: header-args:emacs-lisp :tangle "init.el"
#+author: Krutko Nikita / KrutNA

In the first, ~init.el~ is autogenerated file, added to git for first inital start, edit only this ~readme.org~ file.

* init

Some inital configurations. 

** package

Addition of [[https://melpa.org/][MELPA]] archive for most of cool packages.

#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

#+end_src

** use-package

If ~use-package~ is not installed - install it.

The ~use-package~ macro allows beutiful customization and lazy loading of packages.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

** setq

Some useful variables

*** XDG Base Directory paths

Setting up variables for XDG Base Directory specification.

#+begin_src emacs-lisp
  (setq xdg-data-home                     "~/.local/share"
	xdg-config-home                   "~/.config"
	xdg-cache-home                    "~/.cache"
	xdg-download-dir                  "~/downloads")
#+end_src

*** Files 

File paths for this file and custom (custom is unused but it always created).

#+begin_src emacs-lisp
  (setq custom-file                       (concat user-emacs-directory "custom.el")
	config-org-file                   (concat user-emacs-directory "readme.org")
	backup-directory-alist            `(("." . ,(concat user-emacs-directory "backups"))))
#+end_src

*** Variables

Variables for later using.

#+begin_src emacs-lisp
  (setq local-confs/font-height           105             ; 10 = 1pt
	local-confs/tool-bar              -1              ; -1 for desabling
	local-confs/column-num            t               ; number of current column
	local-confs/line-num              t               ; number of current line

	;; LaTeX
	local-confs/latex-compiler        "xelatex"
      
	;; programming
	electric-pair-mode                t               ; double parenthesis
	local-confs/paren-mode            t               ; show matching pars
	show-paren-delay                  0               ; delay to showing

	;; which-key
	local-confs/which-key-delay       0               ; delay to which-key after keypress 
	local-confs/which-key-s-delay     0.05            ; delay to rerender

	;; path to `tree-sitter` binaries
	local-confs/tree-sitter-bins      (concat xdg-data-home "/tree-sitter/bin")
	)
#+end_src

*** PATH

Emacs PATH env update

#+begin_src emacs-lisp
  (setenv "PATH"
	  (concat xdg-data-home   "/cargo/bin"    ":"
		  xdg-data-home   "/bin"          ":"
		  (getenv "PATH")))

#+end_src


** Keybinds

Main keybinds not related to packages or related to created fuunctions

*** reverse-im

Makes available to use russian input method for hotkeys.

Somthing like on QUERTY ~M-Ñ‡~ will be translated to ~M-x~, very usefull.

Doen't work with some packages, like ~mu4e~.

#+begin_src emacs-lisp
  (use-package reverse-im
    :ensure t
    :custom
    (reverse-im-input-methods '("russian-computer"))
    :config
    (reverse-im-mode t))
#+end_src


* view

Configuration of view, most of all UI.

** theme

Select theme and make it autoload on frame initialization because of bug with some themes which breaks with ~emacsclient~

#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :ensure t :defer t
    :hook (after-init . load-spacemacs-theme)
    :init
    (defun load-spacemacs-theme ()
      "Load spacemacs dark theme"
      (load-theme 'spacemacs-dark t)))
#+end_src

** on start

Configuraion on the emacs/emacsserver start

#+begin_src emacs-lisp
  (tool-bar-mode                          local-confs/tool-bar)
  (column-number-mode                     local-confs/column-num)
  (line-number-mode                       local-confs/line-num)

  (set-face-attribute 'default nil :height local-confs/font-height)
#+end_src

** COMMENT after-init
#+begin_src emacs-lisp
  (setq local-confs/font-height 105)

  (defun configure-emacsclient-buffer-on-load ()
    ""
    ())

  (add-hook 'after-init-hook 'configure-emacsclient-buffer-on-load)
#+end_src

** helm

Configuration of helm.

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :bind (:map helm-command-map ("C-c h" . helm-execute-persistent-action)))
#+end_src

** which-key

Shows available keys on keypress

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :custom
    (which-key-idle-delay 0)
    (which-key-idle-secondary-delay 0.05)
    (which-key-mode t))
#+end_src

** COMMENT screenshot
#+begin_src emacs-lisp
  (add-to-list 'load-path user-emacs-directory)
  (use-package screenshot
    :config
    (setq screenshot-schemes              ; edit as you like
	  '(
	    ;; To local image directory
	    ("local"
	     :dir "~/images/")            ; Image repository directory
	    ;; To current directory
	    ("current-directory"          ; No need to modify
	     :dir default-directory)
	    ;; To remote ssh host
	    ("remote-ssh"
	     :dir "/tmp/"                 ; Temporary saved directory
	     :ssh-dir "www.example.org:public_html/archive/" ; SSH path
	     :url "http://www.example.org/archive/")  ; Host URL prefix
	    ;; To EmacsWiki (need yaoddmuse.el)
	    ("EmacsWiki"                 ; Emacs users' most familiar Oddmuse wiki
	     :dir "~/.yaoddmuse/EmacsWiki/"  ; same as yaoddmuse-directory
	     :yaoddmuse "EmacsWiki")         ; You can specify another Oddmuse Wiki
	    ;; To local web server
	    ("local-server"
	     :dir "~/public_html/"           ; local server directory
	     :url "http://127.0.0.1/")))     ; local server URL prefix
    (setq screenshot-default-scheme "local")); default scheme is "local"
#+end_src


* org-mode

#+begin_src emacs-lisp
  (use-package auctex
    :ensure t :defer t)

  (use-package org
    :after ox-latex
    ;; :hook (org-mode . turn-on-org-cdlatex)
    :custom
    (org-src-fontify-natively t)
    (org-confirm-babel-evaluate nil)
    (org-latex-compiler local-confs/latex-compiler)
    (org-babel-inline-result-wrap "%s")
    (org-babel-load-languages '((emacs-lisp      . t)
				(shell           . t)
				(awk             . t)
				;; (rust            . t)
				(C               . t)
				;; (cpp             . t)
				(python          . t)))
    (org-latex-packages-alist `((,(concat "a4paper,left=3cm,top=2cm,right=1.5cm,bottom=2cm,"
					  "marginparsep=7pt,marginparwidth=.6in") "geometry" t)
				;; ("" "cmap" t)
				("" "xcolor" t)
				;; ("" "listings" t)
				("AUTO" "polyglossia" t ("xelatex")))))
#+end_src


* programming

** configurations (from variables)
#+begin_src emacs-lisp
  (show-paren-mode local-confs/paren-mode)
#+end_src

** rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode org-mode) . rainbow-delimiters-mode))
#+end_src

** COMMENT flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t :defer t
    :init (global-flycheck-mode))
#+end_src

** tree-sitter

Tree sitter is a cool integrate parser.

As mentioned in ~tree-sitter-load~ function description, reads binaries in format ~tree_sitter_$LANGNAME.so~ (and ~tree-sitter-$LANGNAME.so~) for linux.

All ~tree-sitter~ loads and requires are in language sprcified parts.

#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :hook ((after-init . global-tree-sitter-mode)
	   ((sh-mode
	     c-mode c++mode rust-mode
	     java-mode python-mode
	     js2-mode json-mode html-mode) . tree-sitter-hl-mode))
    :config
    (add-to-list 'tree-sitter-load-path local-confs/tree-sitter-bins))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+end_src

** lsp

Base configuration of ~lsp~ client.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook ((prog-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
#+end_src

*** helm

#+begin_src emacs-lisp
  (use-package helm-lsp
    :ensure t
    :commands helm-lsp-workspace-symbol)
#+end_src

** company

Autocompletion with ~company~

*** company

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (after-init . global-company-mode))
#+end_src

*** company box

Backend for ~company~ with icons

#+begin_src emacs-lisp
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+end_src

*** company-lsp

~company~ backend for ~lsp~ 

#+begin_src emacs-lisp
  (use-package company-lsp
    :ensure t
    :after company-mode
    :config
    (add-to-list 'company-backends company-lsp))
#+end_src

** yasnippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook ((prog-mode org-mode) . yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+end_src

** langs

Specifiend customizations for programming related languages.

*** rust

Customization of Rust language.

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :after tree-sitter
    :init
    (tree-sitter-load 'rust)
    (tree-sitter-require 'rust))
#+end_src

*** json
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t :defer t)
#+end_src

** COMMENT debug
#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t :defer t)
#+end_src


* scripts

Some useful scripts for any situations.

** sudo-reopen

Opens current file with ~sudo~ in a new buffer.

#+begin_src emacs-lisp
  (defun sudo-reopen ()
    "Open curent file with sudo"
    (interactive)
    (find-file (concat "/sudo::" buffer-file-name)))
#+end_src

** tangle readme

Function for tangle (convert to ~init.el~) this file on save.

#+begin_src emacs-lisp
  (defun tangle-file ()
    "Tangle file if name equals to `config-org-file`"
    (when (string= buffer-file-name
		   config-org-file)
      (org-babel-tangle-file buffer-file-name)))
  (add-hook 'after-save-hook 'tangle-file)
#+end_src

